//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""71671dd0-b526-44ec-8d20-d8ee729c11ab"",
            ""actions"": [
                {
                    ""name"": ""Jumping"",
                    ""type"": ""Button"",
                    ""id"": ""48f6fb98-9162-4abb-bc75-3f392286f219"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Moving"",
                    ""type"": ""Value"",
                    ""id"": ""b76fe42e-4a97-4674-bbd5-95ab6930dba7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Looking"",
                    ""type"": ""Value"",
                    ""id"": ""8f2fb4c5-944d-46ae-b08a-1215b21208ff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Holding"",
                    ""type"": ""Button"",
                    ""id"": ""f0409081-1d0f-4e1e-b5fc-413ac2e74822"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Picking"",
                    ""type"": ""Button"",
                    ""id"": ""a51fb06a-2dec-49ac-9195-dc7f018a8564"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hitting"",
                    ""type"": ""Button"",
                    ""id"": ""b166ef3f-8398-450b-9e5a-e26c191af0e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a80883d-4780-4bde-9ad5-e56a29292af4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mose & Keyboard"",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fa93f855-ab07-4b8f-916e-b59a73448775"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7b8fd914-f9c1-4cab-b40f-17ddff6327c3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d264c59f-34dc-41ac-a2ac-967d2a75d336"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3f9ba243-85cf-406e-bf14-256674549c20"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""59f7e4c9-1753-4a68-9f95-6e13090498a4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""edb78409-8ce9-4710-bf38-0ee991766b98"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mose & Keyboard"",
                    ""action"": ""Looking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1693d80-364f-4aba-bac6-356b0988641e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mose & Keyboard"",
                    ""action"": ""Holding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""606d4b15-db69-4c93-a8aa-984f262f693f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mose & Keyboard"",
                    ""action"": ""Picking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a38270b-92cc-4c58-b00b-563bc8c12174"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mose & Keyboard"",
                    ""action"": ""Hitting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mose & Keyboard"",
            ""bindingGroup"": ""Mose & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jumping = m_Player.FindAction("Jumping", throwIfNotFound: true);
        m_Player_Moving = m_Player.FindAction("Moving", throwIfNotFound: true);
        m_Player_Looking = m_Player.FindAction("Looking", throwIfNotFound: true);
        m_Player_Holding = m_Player.FindAction("Holding", throwIfNotFound: true);
        m_Player_Picking = m_Player.FindAction("Picking", throwIfNotFound: true);
        m_Player_Hitting = m_Player.FindAction("Hitting", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Jumping;
    private readonly InputAction m_Player_Moving;
    private readonly InputAction m_Player_Looking;
    private readonly InputAction m_Player_Holding;
    private readonly InputAction m_Player_Picking;
    private readonly InputAction m_Player_Hitting;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jumping => m_Wrapper.m_Player_Jumping;
        public InputAction @Moving => m_Wrapper.m_Player_Moving;
        public InputAction @Looking => m_Wrapper.m_Player_Looking;
        public InputAction @Holding => m_Wrapper.m_Player_Holding;
        public InputAction @Picking => m_Wrapper.m_Player_Picking;
        public InputAction @Hitting => m_Wrapper.m_Player_Hitting;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Jumping.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumping;
                @Jumping.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumping;
                @Jumping.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumping;
                @Moving.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoving;
                @Moving.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoving;
                @Moving.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoving;
                @Looking.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLooking;
                @Looking.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLooking;
                @Looking.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLooking;
                @Holding.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHolding;
                @Holding.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHolding;
                @Holding.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHolding;
                @Picking.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPicking;
                @Picking.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPicking;
                @Picking.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPicking;
                @Hitting.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHitting;
                @Hitting.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHitting;
                @Hitting.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHitting;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jumping.started += instance.OnJumping;
                @Jumping.performed += instance.OnJumping;
                @Jumping.canceled += instance.OnJumping;
                @Moving.started += instance.OnMoving;
                @Moving.performed += instance.OnMoving;
                @Moving.canceled += instance.OnMoving;
                @Looking.started += instance.OnLooking;
                @Looking.performed += instance.OnLooking;
                @Looking.canceled += instance.OnLooking;
                @Holding.started += instance.OnHolding;
                @Holding.performed += instance.OnHolding;
                @Holding.canceled += instance.OnHolding;
                @Picking.started += instance.OnPicking;
                @Picking.performed += instance.OnPicking;
                @Picking.canceled += instance.OnPicking;
                @Hitting.started += instance.OnHitting;
                @Hitting.performed += instance.OnHitting;
                @Hitting.canceled += instance.OnHitting;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_MoseKeyboardSchemeIndex = -1;
    public InputControlScheme MoseKeyboardScheme
    {
        get
        {
            if (m_MoseKeyboardSchemeIndex == -1) m_MoseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mose & Keyboard");
            return asset.controlSchemes[m_MoseKeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnJumping(InputAction.CallbackContext context);
        void OnMoving(InputAction.CallbackContext context);
        void OnLooking(InputAction.CallbackContext context);
        void OnHolding(InputAction.CallbackContext context);
        void OnPicking(InputAction.CallbackContext context);
        void OnHitting(InputAction.CallbackContext context);
    }
}
